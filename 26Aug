 




 

Given a string you need to print the size of the longest 
possible substring that has exactly K unique characters. 
If there is no possible substring then print -1.
Input:
S = "aabacbebebe", K = 3
Output: 
7
Explanation: 
"cbebebe" is the longest substring with 3 distinct characters.
Example 2:

Input: 
S = "aaaa", K = 2
Output: -1
Explanation: 
There's no substring with 2 distinct characters.
Your Task:
You don't need to read input or print anything. Your task is to complete the function longestKSubstr() which takes the string S and an integer K as input and returns the length of the longest substring with exactly K distinct characters. If there is no substring with exactly K distinct characters then return -1.

Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(|S|).

Constraints:
1 ≤ |S| ≤ 105
1 ≤ K ≤ 26
All characters are lowercase latin characters

code

class Solution {
    public int longestkSubstr(String str, int k) {
        if(str.length()<k){
            return -1;
        }
       HashMap<Character,Integer>map=new HashMap<>();
       int j=0;
       int max=Integer.MIN_VALUE;
       for(int i=0;i<str.length();i++){
           if(map.containsKey(str.charAt(i))){
               map.put(str.charAt(i),map.get(str.charAt(i))+1);
           }
           else{
               map.put(str.charAt(i),1);
           }
           if(map.size()==k){
               int temp=i-j+1;
               max=Math.max(max,temp);
           }
           else{
               while(map.size()>k && j<=i){
                   if(map.get(str.charAt(j))==1){
                       map.remove(str.charAt(j));
                   }
                   else{
                       map.put(str.charAt(j),map.get(str.charAt(j))-1);
                   }
                   j++;
               }
               int temp=i-j+1;
               max=Math.max(max,temp);
           }
       }
       return max;
    }
}