Coin Change (Count Ways)

Given an integer array coins[ ] representing different denominations of currency and an integer sum, find the number of ways you can make sum by using different combinations from coins[ ]. 
Note: Assume that you have an infinite supply of each type of coin. Therefore, you can use any coin as many times as you want.
Answers are guaranteed to fit into a 32-bit integer. 

Examples:

Input: coins[] = [1, 2, 3], sum = 4
Output: 4
Explanation: Four Possible ways are: [1, 1, 1, 1], [1, 1, 2], [2, 2], [1, 3].
Input: coins[] = [2, 5, 3, 6], sum = 10
Output: 5
Explanation: Five Possible ways are: [2, 2, 2, 2, 2], [2, 2, 3, 3], [2, 2, 6], [2, 3, 5] and [5, 5].
Input: coins[] = [5, 10], sum = 3
Output: 0
Explanation: Since all coin denominations are greater than sum, no combination can make the target sum.

code-----------------------------------------------------------------------------------------------------------

class Solution {
    public int count(int coins[], int sum) 
    {
        int dp[][]=new int[coins.length+1][sum+1];
        for(int i=0;i<dp.length;i++)
        {
            for(int j=0;j<dp[0].length;j++)
            {
                dp[i][j]=-1;
            }
        }
        return helper(coins,sum,0,dp);    
    }
    public int helper(int coins[],int sum,int ind,int dp[][])
    {
        if(ind>=coins.length)
        {
            return -1;
        }
        if(sum<0)
        {
            return -1;
        }
        if(sum==0)
        {
            return 1;
        }
        if(dp[ind][sum]!=-1)
        {
            return dp[ind][sum];
        }
        int ans1=helper(coins,sum-coins[ind],ind,dp);
        int ans2=helper(coins,sum,ind+1,dp);
        int ans=0;
        if(ans1>0)
        {
            ans=ans+ans1;
        }
        if(ans2>0)
        {
            ans=ans+ans2;
        }
        dp[ind][sum]=ans;
        return dp[ind][sum];
        
    }
}