Total Decoding Messages

A message containing letters A-Z is being encoded to numbers using the following mapping:

'A' -> 1
'B' -> 2
...
'Z' -> 26

You are given a string digits. You have to determine the total number of ways that message can be decoded.

Examples:

Input: digits = "123"
Output: 3
Explanation: "123" can be decoded as "ABC"(1, 2, 3), "LC"(12, 3) and "AW"(1, 23).
Input: digits = "90"
Output: 0
Explanation: "90" cannot be decoded, as it's an invalid string and we cannot decode '0'.
Input: digits = "05"
Output: 0
Explanation: "05" cannot be mapped to "E" because of the leading zero ("5" is different from "05"), the string is not a valid encoding message.

code------------

// User function Template for Java
class Solution {
    public int countWays(String digits) 
    {
        int n=digits.length();
        int dp[]=new int[n+1];
        for(int i=0;i<dp.length;i++)
        {
            dp[i]=-1;
        }
        return helper(digits,n,0,dp);
    }
    
    public int helper(String str,int n,int i,int dp[])
    {
        if(i>=n)
        {
            return 1;
        }
        if(str.charAt(i)=='0')
        {
            return 0;
        }
        if(dp[i]!=-1)
        {
            return dp[i];
        }
        int ans1=helper(str,n,i+1,dp);
        int ans2=0;
        if(i!=n-1 &&  (str.charAt(i)=='1' || (str.charAt(i)=='2' && str.charAt(i+1)<='6' ) ))
        {
            ans2=helper(str,n,i+2,dp);
        }
        dp[i]=ans1+ans2;
        return dp[i];
    }
}