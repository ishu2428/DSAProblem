Word Break

You are given a string s and a list dictionary[] of words. Your task is to determine whether the string s can be formed by concatenating one or more words from the dictionary[].

Note: From dictionary[], any word can be taken any number of times and in any order.

Examples :

Input: s = "ilike", dictionary[] = ["i", "like", "gfg"]
Output: true
Explanation: s can be breakdown as "i like".
Input: s = "ilikegfg", dictionary[] = ["i", "like", "man", "india", "gfg"]
Output: true
Explanation: s can be breakdown as "i like gfg".
Input: s = "ilikemangoes", dictionary[] = ["i", "like", "man", "india", "gfg"]
Output: false
Explanation: s cannot be formed using dictionary[] words.

Code:----------------





class Solution {
    public boolean wordBreak(String s, String[] dictionary) {
        // code here
        
        Set<String> set = new HashSet<>();
            int maxLength =0;
        for(String word :dictionary){
            set.add(word);
            maxLength = Math.max(word.length(), maxLength);
        }
        
        int n = s.length();
         boolean dp[] = new boolean[n+1];
         dp[0] = true;
         
            for (int i = 1; i <= n; i++) {
            for (int j = i-1; j >= Math.max(0,i-maxLength); j--) {
                if (dp[j] && set.contains(s.substring(j, i))) {
                    dp[i] = true;
                    break;
                }
            }
            }
        return dp[n];
        
    }
}