Count all possible paths from top left to bottom right

The task is to count all the possible paths from top left to bottom right of a m X n matrix with the constraints that from each cell you can either move only to right or down.

Examples :

Input: m = 2, n = 2
Output: 2 
Explanation: Two possible ways are RD and DR.  
Input: m = 3, n = 3
Output: 6
Explanation: Six possible ways are RRDD, DDRR, RDDR, DRRD, RDRD, DRDR. 

Code:---------------

class Solution 
{
   
    int numberOfPaths(int m, int n) 
    {
        if(m==1 || n==1)
        {
            return 1;
        }
        int dp[][]=new int[m][n];
        for(int i=0;i<dp[0].length;i++)
        {
            dp[0][i]=1;
        }
        for(int i=0;i<dp.length;i++)
        {
            dp[i][0]=1;
        }
        for(int i=1;i<dp.length;i++)
        {
            for(int j=1;j<dp[0].length;j++)
            {
                dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        }
        return dp[m-1][n-1];
        
    }
    
}