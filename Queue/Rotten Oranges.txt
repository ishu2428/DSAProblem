Rotten Oranges

A celebrity is a person who is known to all but does not know anyone at a party. A party is being organized by some people. A square matrix mat[][] (n*n) is used to represent people at the party such that if an element of row i and column j is set to 1 it means ith person knows jth person. You need to return the index of the celebrity in the party, if the celebrity does not exist, return -1.

Note: Follow 0-based indexing.

Examples:

Input: mat[][] = [[1, 1, 0], [0, 1, 0], [0, 1, 1]]
Output: 1
Explanation: 0th and 2nd person both know 1st person. Therefore, 1 is the celebrity person. 
Input: mat[][] = [[1, 1], [1, 1]]
Output: -1
Explanation: Since both the people at the party know each other. Hence none of them is a celebrity person.
Input: mat[][] = [[1]]
Output: 0

code:-

class Solution {
    public int celebrity(int mat[][])
    {
        Queue<Integer>q1=new LinkedList<>();
        for(int i=0;i<mat.length;i++)
        {
            q1.add(i);
        }
        while(q1.size()>1)
        {
            int t1=q1.poll();
            int t2=q1.poll();
            if(helper(mat,t1,t2))
            {
                q1.add(t2);
            }
            else
            {
                q1.add(t1);
            }
        }
        int ans=q1.poll();
        for(int i=0;i<mat[0].length;i++)
        {
            if(mat[ans][i]==1 && i!=ans)
            {
                return -1;
            }
        }
        for(int i=0;i<mat.length;i++)
        {
            if(mat[i][ans]==0)
            {
                return -1;
            }
        }
        return ans;
    }
    
    public boolean helper(int mat[][],int t1,int t2)
    {
        return mat[t1][t2]==1?true:false;
    }
    
}