Get Min from Stack

Given q queries, You task is to implement the following four functions for a stack:

push(x) – Insert an integer x onto the stack.
pop() – Remove the top element from the stack.
peek() - Return the top element from the stack. If the stack is empty, return -1.
getMin() – Retrieve the minimum element from the stack in O(1) time. If the stack is empty, return -1.
Each query can be one of the following:

1 x : Push x onto the stack.
2 : Pop the top element from the stack.
3: Return the top element from the stack. If the stack is empty, return -1.
4: Return the minimum element from the stack.
Examples:

Input: q = 7, queries = [[1, 2], [1, 3], [3], [2], [4], [1, 1], [4]]
Output: [3, 2, 1]
Explanation: 
push(2): Stack is [2]
push(3): Stack is [2, 3]
peek(): Top element is 3
pop(): Removes 3, stack is [2]
getMin(): Minimum element is 2
push(1): Stack is [2, 1]
getMin(): Minimum element is 1
Input: q = 4, queries = [[1, 4], [1, 2], [4], [3]]
Output: [2, 2]
Explanation: 
push(4): Stack is [4]
push(2): Stack is [4, 2]
getMin(): Minimum element is 2
peek(): Top element is 2
Input: q = 5, queries = [[1, 10], [4], [1, 5], [4], [2]]
Output: [10, 5]
Explanation: 
push(10): Stack is [10]
getMin(): Minimum element is 10
push(5): Stack is [10, 5]
getMin(): Minimum element is 5
pop(): Removes 5, stack is [10]


Code:-

class Solution {
    int top;
    int arr[];
    int min;
    public Solution() {
        top=-1;
        arr=new int[100000];
        min=Integer.MAX_VALUE;
    }

    
    
    public void push(int x) {
        if(min>x)
        {
            min=x;
        }
        top=top+1;
        arr[top]=x;
        
    }

    // Remove the top element from the Stack
    public void pop() 
    {
        if(top!=-1)
        {
            int t1=arr[top];
            top--;
            if(min==t1)
            {
                min=Integer.MAX_VALUE;
                for(int i=top;i>=0;i--)
                {
                    if(min>arr[i])
                    {
                        min=arr[i];
                    }
                }
            }
        }
    }

    // Returns top element of the Stack
        
    public int peek() 
    {
        if(top==-1)
        {
            return -1;
        }
        else
        {
            return arr[top];
        }
        // code here
    }

        
    // Finds minimum element of Stack
    public int getMin() {
        return min==Integer.MAX_VALUE?-1:min;
    }
}