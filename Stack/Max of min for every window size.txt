Max of min for every window size

Given an array of integers arr[], the task is to find the maximum of the minimum values for every possible window size in the array, where the window size ranges from 1 to arr.size().

More formally, for each window size k, determine the smallest element in all windows of size k, and then find the largest value among these minimums where 1<=k<=arr.size().

Examples :

Input: arr[] = [10, 20, 30, 50, 10, 70, 30]
Output: [70, 30, 20, 10, 10, 10, 10] 
Explanation: 
1. First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10], [20], [30], [50], [10], [70] and [30]. Maximum of these minimums is 70. 
2. Second element in output indicates maximum of minimums of all windows of size 2. Minimums of windows of size 2 are [10], [20], [30], [10], [10], and [30]. Maximum of these minimums is 30. 
3. Third element in output indicates maximum of minimums of all windows of size 3. Minimums of windows of size 3 are [10], [20], [10], [10] and [10]. Maximum of these minimums is 20. 
Similarly other elements of output are computed.
Input: arr[] = [10, 20, 30]
Output: [30, 20, 10]
Explanation: First element in output indicates maximum of minimums of all windows of size 1. Minimums of windows of size 1 are [10] , [20] , [30]. Maximum of these minimums are 30 and similarly other outputs can be computed

Code:-

class Solution {
    public ArrayList<Integer> maxOfMins(int[] arr)
    {
        int left[]=new int[arr.length];
        int right[]=new int[arr.length];
        Stack<Integer>s1=new Stack<>();
        for(int i=0;i<arr.length;)
        {
            if(s1.isEmpty())
            {
                left[i]=-1;
                s1.push(i);
                i++;
            }
            else if(arr[i]>arr[s1.peek()])
            {
                left[i]=s1.peek();
                s1.push(i);
                i++;
            }
            else
            {
                s1.pop();
            }
            
        }
        
        s1=new Stack<>();
        for(int i=arr.length-1;i>=0;)
        {
            if(s1.isEmpty())
            {
                right[i]=arr.length;
                s1.push(i);
                i--;
            }
            else if(arr[i]>arr[s1.peek()])
            {
                right[i]=s1.peek();
                s1.push(i);
                i--;
            }
            else
            {
                s1.pop();
            }
        }
        int subArray[]=new int[arr.length];
        for(int i=0;i<arr.length;i++)
        {
            subArray[i]=right[i]-left[i];
        }
        int ans[]=new int[arr.length];
        for(int i=0;i<ans.length;i++)
        {
            ans[i]=Integer.MIN_VALUE;
        }
        for(int i=0;i<arr.length;i++)
        {
            ans[subArray[i]-2]=Math.max(ans[subArray[i]-2],arr[i]);
        }
        for(int i=arr.length-2;i>=0;i--)
        {
            ans[i]=Math.max(ans[i],ans[i+1]);
        }
        ArrayList<Integer>temp=new ArrayList<>();
        for(int i=0;i<ans.length;i++)
        {
            temp.add(ans[i]);
        }
        return temp;
    }
}