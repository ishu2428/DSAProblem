Special Stack

Design a data-structure SpecialStack that supports all the stack operations like push(), pop(), isEmpty(), isFull() and an additional operation getMin() which should return the minimum element from the SpecialStack. Your task is to complete all the functions, using a stack data structure.

Note: The output of the code will be the value returned by getMin() function.

Examples:

Input: stack: 18 19 29 15 16
Output: 15
Explanation: The minimum element of the stack is 15.
Input: stack: 34 335 1814 86
Output: 34
Explanation: The minimum element of the stack is 34.
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Code:-

class GfG {
    
    public void push(int a, Stack<Integer> s)
    {
        s.push(a);
    }

    public int pop(Stack<Integer> s) 
    {
        //GfG obj=new GfG();
        if(s.isEmpty())
        {
            return -1;
        }
        else
        {
           int t1=s.pop();
           
           return t1;
        }
    }

    public int min(Stack<Integer> s) 
    {

         if(s.isEmpty())
         {
             return 0;
         }
         else
         {
             Stack<Integer>hf=new Stack<>();
               int minValue=Integer.MAX_VALUE;
               while(!s.isEmpty())
               {
                   if(minValue>s.peek())
                   {
                       minValue=s.peek();
                   }
                   hf.add(s.pop());
               }
               while(!hf.isEmpty())
               {
                   s.add(hf.pop());
               }
               return minValue;
         }
    }

    public boolean isFull(Stack<Integer> s, int n) 
    {
        if(s.size()==n)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

    public boolean isEmpty(Stack<Integer> s) {
        if(s.isEmpty())
        {
            return true;
        }
        else
        {
            return false;
        }
    }
}