Middle of a Linked List

Given the head of a linked list, the task is to find the middle. For example, the middle of 1-> 2->3->4->5 is 3. If there are two middle nodes (even count), return the second middle. For example, middle of 1->2->3->4->5->6 is 4.

Examples:

Input: Linked list: 1->2->3->4->5
Output: 3

Explanation: The given linked list is 1->2->3->4->5 and its middle is 3.
Input: Linked list: 2->4->6->7->5->1
Output: 7 

Explanation: The given linked list is 2->4->6->7->5->1 and its middle is 7.

Code:-
class Solution {
    int getMiddle(Node head) {
        int l1=length(head);
        int mid=l1/2;
        int count=0;
        Node temp=head;
        while(temp!=null)
        {
            if(count==mid)
            {
                return temp.data;
            }
            temp=temp.next;
            count++;
        }
        return -1;
    }
    public int length(Node head)
    {
        int  l1=0;
        Node temp=head;
        while(temp!=null)
        {
            l1++;
            temp=temp.next;
        }
        return l1;
    }
}
