Intersection of Two Linked Lists

Given two linked lists head1 and head2, find the intersection of two linked lists. Each of the two linked lists contains distinct node values.

Note: The order of nodes in this list should be the same as the order in which those particular nodes appear in input head1 and return null if no common element is present.

Examples:

Input: LinkedList1: 9->6->4->2->3->8 , LinkedList2: 1->2->8->6
 
Output: 6->2->8
Explanation: Nodes 6, 2 and 8 are common in both of the lists and the order will be according to LinkedList1. 
Input: LinkedList1: 5->3->1->13->14 , LinkedList2: 3->13
 
Output: 3->13
Explanation: Nodes 3 and 13 are common in both of the lists and the order will be according to LinkedList1. 

code:-

class Solution {
    // Function to find the intersection of two linked lists
    public Node findIntersection(Node head1, Node head2) 
    {
        HashSet<Integer>set=new HashSet<>();
        Node temp2=head2;
        while(temp2!=null)
        {
            set.add(temp2.data);
            temp2=temp2.next;
        }
        Node ansHead=null;
        Node ansTail=null;
        Node temp1=head1;
        while(temp1!=null)
        {
            if(set.contains(temp1.data))
            {
                if(ansHead==null)
                {
                    ansHead=temp1;
                    ansTail=temp1;
                }
                else
                {
                    ansTail.next=temp1;
                    ansTail=temp1;
                }
            }
            temp1=temp1.next;
        }
        if(ansTail!=null)
        {
            ansTail.next=null;
        }
        return ansHead;
    }
}