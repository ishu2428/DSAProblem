Intersection in Y Shaped Lists

n the point where these two linked lists intersect.

Note: It is guaranteed that the intersected node always exists.

Custom Input Format:

head1 contains the nodes before intersection in list1
head2 contains the nodes before intersection in list2
CommonList contains the nodes after intersection of list1 and list2.

Examples:

Input: head1 : 4 -> 4 -> 4 -> 4 -> 4, head2 : 4 -> 4 -> 4
 
Output: 4
Explanation: From the above image, it is clearly seen that the common part is 4 -> 4 whose starting point is 4.
Input: head1 : 4 -> 1 -> 8 -> 4 -> 5, head2 : 5 -> 6 -> 1 -> 8 -> 4 -> 5
 
Output: 8
Explanation: From the above image, it is clearly seen that the common part is 8 -> 4 -> 5 whose starting point is 8.

Code:-

class Intersect {
    // Function to find intersection point in Y shaped Linked Lists.
    static Node intersectPoint(Node head1, Node head2) {
        int l1=length(head1);
        int l2=length(head2);
        if(l1>l2)
        {
            int t1=l1-l2;
            Node temp1=head1;
            int count=0;
            while(temp1!=null)
            {
                if(count==t1)
                {
                    break;
                }
                count++;
                temp1=temp1.next;
            }
            Node temp2=head2;
            while(temp1!=null)
            {
                if(temp1==temp2)
                {
                    return temp1;
                }
                temp1=temp1.next;
                temp2=temp2.next;
            }
        }
        else
        {
            int t1=l2-l1;
            Node temp2=head2;
            int count=0;
            while(temp2!=null)
            {
                if(count==t1)
                {
                    break;
                }
                count++;
                temp2=temp2.next;
            }
            Node temp1=head1;
            while(temp1!=null)
            {
                if(temp1==temp2)
                {
                    return temp1;
                }
                temp1=temp1.next;
                temp2=temp2.next;
            }
            
        }
        return head1;
    }
    public static int length(Node head)
    {
        int count=0;
        Node temp=head;
        while(temp!=null)
        {
            count++;
            temp=temp.next;
        }
        return count;
    }
}