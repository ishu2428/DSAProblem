Spirally traversing a matrix

You are given a rectangular matrix mat[][] of size n x m, and your task is to return an array while traversing the matrix in spiral form.

Examples:

Input: mat[][] = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
Output: [1, 2, 3, 4, 8, 12, 16, 15, 14, 13, 9, 5, 6, 7, 11, 10]
Explanation: 

Input: mat[][] = [[1, 2, 3, 4, 5, 6], [7, 8, 9, 10, 11, 12], [13, 14, 15, 16, 17, 18]]
Output: [1, 2, 3, 4, 5, 6, 12, 18, 17, 16, 15, 14, 13, 7, 8, 9, 10, 11]
Explanation: Applying same technique as shown above.
Input: mat[][] = [[32, 44, 27, 23], [54, 28, 50, 62]]
Output: [32, 44, 27, 23, 62, 50, 28, 54]
Explanation: Applying same technique as shown above, output will be [32, 44, 27, 23, 62, 50, 28, 54].

Code:---

class Solution {
    // Function to return a list of integers denoting spiral traversal of matrix.
    public ArrayList<Integer> spirallyTraverse(int mat[][]) 
    {
        ArrayList<Integer>ans=new ArrayList<>();
        int i=0;
        int j=0;
        int n=mat.length;
        int m=mat[0].length;
        while(i<n && j<m)
        {
            for(int k=j;k<m;k++)
            {
                ans.add(mat[i][k]);
            }
            i++;
            for(int k=i;k<n;k++)
            {
                ans.add(mat[k][m-1]);
            }
            m=m-1;
            if(i<n)
            {
                for(int k=m-1;k>=j;k--)
                {
                    ans.add(mat[n-1][k]);
                }
                n=n-1;
            }
            if(j<m)
            {
                for(int k=n-1;k>=i;k--)
                {
                    ans.add(mat[k][j]);
                }
                j=j+1;
            }
        }
        return ans;
    }
}
