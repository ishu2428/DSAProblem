Row with max 1s

You are given a 2D binary array arr[][] consisting of only 1s and 0s. Each row of the array is sorted in non-decreasing order. Your task is to find and return the index of the first row that contains the maximum number of 1s. If no such row exists, return -1.

Note:

The array follows 0-based indexing.
The number of rows and columns in the array are denoted by n and m respectively.
Examples:

Input: arr[][] = [[0,1,1,1], [0,0,1,1], [1,1,1,1], [0,0,0,0]]
Output: 2
Explanation: Row 2 contains the most number of 1s (4 1s). Hence, the output is 2.
Input: arr[][] = [[0,0], [1,1]]
Output: 1
Explanation: Row 1 contains the most number of 1s (2 1s). Hence, the output is 1.
Input: arr[][] = [[0,0], [0,0]]
Output: -1
Explanation: No row contains any 1s, so the output is -1.

code:--------

class Solution {
    public int rowWithMax1s(int arr[][]) {
       int max=Integer.MIN_VALUE;
       int ans=-1;
       for(int i=0;i<arr.length;i++)
       {
            int ans1=helper(arr[i]);
            if(max<ans1)
            {
                max=ans1;
                ans=i;
            }
       }
       return ans;
    }
    public int helper(int arr[])
    {
        int st=0;
        int end=arr.length-1;
        int ind=-1;
        while(st<=end)
        {
            int mid=(st+end)/2;
            if(arr[mid]==1)
            {
                ind=mid;
                end=mid-1;
            }
            else
            {
                st=mid+1;
            }
        }
        if(ind==-1)
        {
            return 0;
        }
        else
        {
            return arr.length-ind;
        }
    }
}