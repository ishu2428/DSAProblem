Heap Sort
Given an array of size N.
 The task is to sort the array elements by completing functions heapify() and
buildHeap() which are used to implement Heap Sort.

Input:
N = 5
arr[] = {4,1,3,9,7}
Output:
1 3 4 7 9
Explanation:
After sorting elements
using heap sort, elements will be
in order as 1,3,4,7,9.

Input:
N = 10
arr[] = {10,9,8,7,6,5,4,3,2,1}
Output:
1 2 3 4 5 6 7 8 9 10
Explanation:
After sorting elements
using heap sort, elements will be
in order as 1, 2,3,4,5,6,7,8,9,10

code

class Solution
{
    //Function to build a Heap from array.
    void buildHeap(int arr[], int n)
    {
         for(int i=(n/2)-1;i>=0;i--){
            heapify(arr,i,n);
        }
        
    }
 
    //Heapify function to maintain heap property.
    void heapify(int arr[], int st, int n)
    {
        int parent=st;
        int left=2*parent+1;
        int right=2*parent+2;
        while(left<n){
            int minInd=parent;
            if(arr[left]<arr[minInd]){
                minInd=left;
            }
            if(right<n && arr[right]<arr[minInd]){
                minInd=right;
            }
            if(parent==minInd){
                return;
            }
            int temp=arr[minInd];
            arr[minInd]=arr[parent];
            arr[parent]=temp;
            parent=minInd;
            left=2*parent+1;
            right=2*parent+2;
        }
    }
    
    //Function to sort an array using Heap Sort.
    public void heapSort(int arr[], int n)
    {
        buildHeap(arr,n);
        for(int i=n-1;i>=0;i--){
            int temp=arr[0];
            arr[0]=arr[i];
            arr[i]=temp;
            heapify(arr,0,i);
        }
       int st=0;
       int end=n-1;
       while(st<end){
           int temp=arr[st];
           arr[st]=arr[end];
           arr[end]=temp;
           st++;
           end--;
       }
    }
 }
 