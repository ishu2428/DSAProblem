Bottom View of Binary Tree

Given a binary tree, return an array where elements represent the bottom view of the binary tree from left to right.

Note: If there are multiple bottom-most nodes for a horizontal distance from the root, then the latter one in the level traversal is considered. For example, in the below diagram, 3 and 4 are both the bottommost nodes at a horizontal distance of 0, here 4 will be considered.

                      20
                    /    \
                  8       22
                /   \     /   \
              5      3 4     25
                     /    \      
                 10       14

For the above tree, the output should be 5 10 4 14 25.

Examples :

Input:
       1
     /   \
    3     2
Output: 3 1 2
Explanation: First case represents a tree with 3 nodes and 2 edges where root is 1, left child of 1 is 3 and right child of 1 is 2.

Thus bottom view of the binary tree will be 3 1 2.
Input:
         10
       /    \
      20    30
     /  \
    40   60
Output: 40 20 60 30
Input:
        1
       /   
      2
Output: 2 1


Code:------------------------------------------------

class Pair{
    Node n1;
    int dist;
    public Pair(Node n1,int dist)
    {
        this.n1=n1;
        this.dist=dist;
    }
}
class Solution {
    // Function to return a list containing the bottom view of the given tree.
    public ArrayList<Integer> bottomView(Node root)
    {
        HashMap<Integer,Integer>map=new HashMap<>();
        Queue<Pair>q1=new LinkedList<>();
        q1.add(new Pair(root,0));
        ArrayList<Integer>temp=new ArrayList<>();
        
        while(!q1.isEmpty())
        {
            Pair front=q1.poll();
            if(map.containsKey(front.dist))
            {
                map.put(front.dist,front.n1.data);
            }
            else
            {
                map.put(front.dist,front.n1.data);
                temp.add(front.dist);
            }
            if(front.n1.left!=null)
            {
                q1.add(new Pair(front.n1.left,front.dist-1));
            }
            if(front.n1.right!=null)
            {
                q1.add(new Pair(front.n1.right,front.dist+1));
            }
        }
        Collections.sort(temp);
        ArrayList<Integer>ans=new ArrayList<>();
        for(int i=0;i<temp.size();i++)
        {
            int t1=map.get(temp.get(i));
            ans.add(t1);
        }
        return ans;
    }
}


