Odd Node Out

In the classroom, the teacher gave Geek two Binary Trees. Each Node of the first binary tree had an identical node in the second tree except one. The teacher called that one node as OddNode.
Now, the Geek wants to find the data stored in the OddNode. Help him to find out.

NOTE: Here, an identical node means that the value stored in the node is same.
All nodes may also have same values.

Example 1:

Input:
B1:
  1
   \
    2
   /
  3
B2:
    1
   /
  3
 / \
2   4
Output:
4
Explanation:
Here, the node with data 4 in tree B2
is not in the tree B1.
Example 2:

Input:
B1:
   2
  / \
 4   3
  \
   1
B2:
    9
   / \
  3   4
 /   /
1   2
Output:
9
Explanation:
Here, the node with data 9 in B2 tree is
not identical to any node in B1 tree.

Code:-

class Solution {
    int oddNodeOut(Node root1, Node root2)
    {
        HashMap<Integer,Integer>map=new HashMap<>();
        preOrder(root1,map);
        int ans1= helper(root2,map);
        if(ans1!=-1)
        {
            return ans1;
        }
        return -1;
       
    }
    
    public int helper(Node root,HashMap<Integer,Integer>map)
    {
        if(root==null)
        {
            return -1;
        }
        if(map.containsKey(root.data))
        {
            if(map.get(root.data)==1)
            {
                map.remove(root.data);
            }
            else
            {
                map.put(root.data,map.get(root.data)-1);
            }
            
        }
        else
        {
            return root.data;
        }
        int ans1=helper(root.left,map);
        if(ans1!=-1)
        {
            return ans1;
        }
        
        int ans2=helper(root.right,map);
        if(ans2!=-1)
        {
            return ans2;
        }
        return -1;
    }
    public void preOrder(Node root,HashMap<Integer,Integer>map)
    {
        if(root==null)
        {
            return;
        }
        if(map.containsKey(root.data))
        {
            map.put(root.data,map.get(root.data)+1);
        }
        else
        {
            map.put(root.data,1);
        }
        preOrder(root.left,map);
        preOrder(root.right,map);
    }
    
}