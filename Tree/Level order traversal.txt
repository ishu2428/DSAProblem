Level order traversal

Given a root of a binary tree with n nodes, the task is to find its level order traversal. Level order traversal of a tree is breadth-first traversal for the tree.

Examples:

Input: root[] = [1, 2, 3]

Output: [[1], [2, 3]]
Input: root[] = [10, 20, 30, 40, 50]

Output: [[10], [20, 30], [40, 50]]
Input: root[] = [1, 3, 2, N, N, N, 4, 6, 5]

Output: [[1], [3, 2], [4], [6, 5]]

Code:-

class Solution 
{
    public ArrayList<ArrayList<Integer>> levelOrder(Node root) 
    {
        Queue<Node>q1=new LinkedList<>();
        ArrayList<ArrayList<Integer>>ans=new ArrayList<>();
        q1.add(root);
        q1.add(null);
        ArrayList<Integer>temp=new ArrayList<>();
        while(!q1.isEmpty())
        {
            Node front=q1.poll();
            if(front==null)
            {
                break;
            }
            temp.add(front.data);
            if(front.left!=null)
            {
                q1.add(front.left);
            }
            if(front.right!=null)
            {
                q1.add(front.right);
            }
            if(q1.peek()==null)
            {
                q1.poll();
                q1.add(null);
                ans.add(temp);
                temp=new ArrayList<>();
            }
        }
        return ans;
    }
}