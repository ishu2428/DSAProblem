Serialize and deserialize a binary tree

Serialization is to store a tree in an array so that it can be later restored and deserialization is reading tree back from the array. Complete the functions

serialize() : stores the tree into an array a and returns the array.
deSerialize() : deserializes the array to the tree and returns the root of the tree.
Note: Multiple nodes can have the same data and the node values are always positive integers. Your code will be correct if the tree returned by deSerialize(serialize(input_tree)) is same as the input tree. Driver code will print the in-order traversal of the tree returned by deSerialize(serialize(input_tree)).

Examples :

Input: root = [1, 2, 3]
      
Output: [2, 1, 3]
Input: root = [10, 20, 30, 40, 60, N, N]
      
Output: [40, 20, 60, 10, 30]
Constraints:
1 <= Number of nodes <= 104
1 <= Data of a node <= 109

Code:-

class Tree {
    // Function to serialize a tree and return a list containing nodes of tree.
    public ArrayList<Integer> serialize(Node root) 
    {
        ArrayList<Integer>ans=new ArrayList<>();
        helper1(root,ans);
        return ans;
    }
    public void helper1(Node root,ArrayList<Integer>ans)
    {
        if(root==null)
        {
            ans.add(-1);
            return ;
        }
        ans.add(root.data);
        helper1(root.left,ans);
        helper1(root.right,ans);
    }

    // Function to deserialize a list and construct the tree.
    static int i;
    public Node deSerialize(ArrayList<Integer> arr) 
    {
        i=0;
        return helper2(arr);
    }
    public Node helper2(ArrayList<Integer>arr)
    {
        if(i==arr.size())
        {
            return null;
        }
        if(arr.get(i)==-1)
        {
            i++;
            return null;
        }
        Node n1=new Node(arr.get(i++));
        n1.left=helper2(arr);
        n1.right=helper2(arr);
        return n1;
    }
};