Connect Nodes of Levels

Given a binary tree, connect the nodes that are at the same level. You'll be given an addition nextRight pointer for the same.

Initially, all the next night pointers point to garbage values. Your function should set these pointers to the point next right for each node.
       10                       10 ------> NULL
      / \                       /      \
     3   5       =>     3 ------> 5 --------> NULL
    / \     \               /  \           \
   4   1   2          4 --> 1 -----> 2 -------> NULL

 

Examples:

Input:
     3
   /  \
  1    2
Output:
[3, 1, 2]
[1, 3, 2]
Explanation:The connected tree is
        3 ------> NULL
     /    \
    1-----> 2 ------ NULL
Input:
      10
    /   \
   20   30
  /  \
 40  60
Output:
[10, 20, 30, 40, 60]
[40, 20, 60, 10, 30]
Explanation:The connected tree is
         10 ----------> NULL
       /     \
     20 ------> 30 -------> NULL
  /    \
 40 ----> 60 ----------> NULL
Input:
       15
     /  \
    10   20
   / \   / \
  8   12 18 25

Output:
[15, 10, 20, 8, 12, 18, 25]
[8, 10, 12, 15, 18, 20, 25]
Explanation:The connected tree is
         15 ----------> NULL
       /    \
     10 ------> 20 --------> NULL
    /  \        /  \
   8 --> 12 -->18 --> 25 --> NULL



Code:-------------------------------------------------------------------------------------------------


class Solution {
    // Function to connect nodes at same level.
    public Node connect(Node root) {
        ArrayList<Node>ans=new ArrayList<>();
        Queue<Node>q1=new LinkedList<>();
        q1.add(root);
        q1.add(null);
        while(!q1.isEmpty())
        {
            Node front=q1.poll();
            if(front==null)
            {
                break;
            }
            ans.add(front);
            if(front.left!=null)
            {
                q1.add(front.left);
            }
            if(front.right!=null)
            {
                q1.add(front.right);
            }
            
            if(q1.peek()==null)
            {
                q1.poll();
                q1.add(null);
                for(int i=0;i<ans.size();i++)
                {
                    if(i+1==ans.size())
                    {
                        break;
                    }
                    else
                    {
                        ans.get(i).nextRight=ans.get(i+1);
                    }
                }
                ans=new ArrayList<>();
            }
            
        }
        return root;
    }
}