Nodes at given distance in binary tree
Given a binary tree, a target node in the binary tree, and an integer value k, find all the nodes that are at distance k from the given target node. No parent pointers are available.
Note:

You have to return the list in sorted order.
The tree will not contain duplicate values.
Example 1:

Input:      
          20
        /    \
      8       22 
    /   \
   4    12 
       /   \
      10    14
Target Node = 8
K = 2
Output: 10 14 22
Explanation: The three nodes at distance 2
from node 8 are 10, 14, 22.

Example 2:

Input:      
         20
       /    \
      7      24
    /   \
   4     3
        /  
       1    
Target Node = 7
K = 2
Output: 1 24
Your Task:  
You don't need to read input or print anything. Complete the function KDistanceNodes() which takes the root of the tree, target, and K as input parameters and returns a list of nodes at k distance from target in a sorted order.

Expected Time Complexity: O(N*logN)
Expected Auxiliary Space: O(Height of tree)

Constraints:
1 ≤ N ≤ 105
1 ≤ data of node ≤ 109
1 ≤ target ≤ 109
1 ≤ k ≤ 20

//code
public static ArrayList<Integer> KDistanceNodes(Node root, int target , int k)
    {
        ArrayList<Node>temp=new ArrayList<>();
        findPath(root,temp,target);
        
        ArrayList<Integer>ans=new ArrayList<>();
        for(int i=0;i<temp.size();i++){
            if(i==0){
                //System.out.print(temp.get(i).data+" ");
                helper(temp.get(i),null,k,ans);
            }
            else{
                //System.out.print(temp.get(i).data+" ");
                helper(temp.get(i),temp.get(i-1),k-i,ans);
            }
        }
        Collections.sort(ans);
        return ans;
    }
    public static void helper(Node root,Node prev,int k,ArrayList<Integer>ans){
        if(root==null || root==prev){
            return;
        }
        if(k<0){
            return;
        }
        if(k==0){
            ans.add(root.data);
            return;
        }
        helper(root.left,prev,k-1,ans);
        helper(root.right,prev,k-1,ans);
    }
    public static boolean findPath(Node root,ArrayList<Node>temp,int target){
        if(root==null){
            return false;
        }
        if(root.data==target){
            temp.add(root);
            return true;
        }
        
            if(findPath(root.left,temp,target)){
                temp.add(root);
                return true;
            }
        
        
            if(findPath(root.right,temp,target)){
                temp.add(root);
                return true;
            }
        
        return false;
    }