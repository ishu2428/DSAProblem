Kth Ancestor in a Tree
Given a binary tree of size  N, a node, and a positive integer k.
Your task is to complete the function kthAncestor(), the function should
 return the kth ancestor of the given node in the binary tree. If there does
not exist any such ancestor then return -1.
Note:
1. It is guaranteed that the node exists in the tree.
2. All the nodes of the tree have distinct values.



Input:
K = 2 Node = 4
Output: 1
Explanation:
Since, K is 2 and node is 4, so we
first need to locate the node and
look k times its ancestors.
Here in this Case node 4 has 1 as his
2nd Ancestor aka the Root of the tree.
Example 2:

Input:
k=1 
node=3
      1
    /   \
    2     3

Output:
1
Explanation:
K=1 and node=3 ,Kth ancestor of node 3 is 1.

code
/*
Structure of Node class is:

class Node {
    int data;
    Node left, right;
    
    public Node(int data){
        this.data = data;
    }
}
*/

class Solution
{
    public int kthAncestor(Node root, int k, int val)
    {
        ArrayList<Integer>store=new ArrayList<>();
        findPath(root,val,store);
        if(store.size()==0 || store.size()<=k){
            return -1;
        }
        else{
            return store.get(k);
        }
    }
    public static boolean findPath(Node root,int val,ArrayList<Integer>store){
        if(root==null){
            return false;
        }
        if(root.data==val){
            store.add(val);
            return true;
        }
        if(findPath(root.left,val,store)){
            store.add(root.data);
            return true;
        }
        if(findPath(root.right,val,store)){
            store.add(root.data);
            return true;
        }
        return false;
    }
}