Find the string in grid

Given a 2D grid of n*m of characters and a word, find all occurrences of given word in grid. A word can be matched in all 8 directions at any point. Word is said to be found in a direction if all characters match in this direction (not in zig-zag form). The 8 directions are, horizontally left, horizontally right, vertically up, vertically down, and 4 diagonal directions.

Note: The returning list should be lexicographically smallest. If the word can be found in multiple directions starting from the same coordinates, the list should contain the coordinates only once. 

Example 1:

Input: 
grid = {{a,b,c},{d,r,f},{g,h,i}},
word = "abc"
Output: 
{{0,0}}
Explanation: 
From (0,0) we can find "abc" in horizontally right direction.
Example 2:

Input: 
grid = {{a,b,a,b},{a,b,e,b},{e,b,e,b}}
word = "abe"
Output: 
{{0,0},{0,2},{1,0}}
Explanation: 
From (0,0) we can find "abe" in right-down diagonal. 
From (0,2) we can find "abe" in left-down diagonal. 
From (1,0) we can find "abe" in horizontally right direction.

Code:----------------------------------------------------------------------------------------------------------------------

class Solution 
{
     static int u[]={-1,0,1,0,-1,-1,1,1};
     static int v[]={0,1,0,-1,-1,1,1,-1};
    public int[][] searchWord(char[][] grid, String word) 
    {
       
       ArrayList<ArrayList<Integer>>ans=new ArrayList<>();
       HashSet<ArrayList<Integer>>set=new HashSet<>();
       int visited[][]=new int[grid.length][grid[0].length];
       for(int i=0;i<grid.length;i++)
       {
           for(int j=0;j<grid[0].length;j++)
           {
               if(grid[i][j]==word.charAt(0))
               {
                   
                   for(int k=0;k<8;k++)
                   {
                       if(dfs(grid,word,1,i,j,k))
                        {
                            ArrayList<Integer>t1=new ArrayList<>();
                            t1.add(i);
                            t1.add(j);
                            if(set.contains(t1))
                            {
                                continue;
                            }
                            set.add(t1);
                            ans.add(t1);
                        }
                   }
               }
           }
       }
       int ans1[][]=new int[ans.size()][2];
       for(int i=0;i<ans.size();i++)
       {
           for(int j=0;j<2;j++)
           {
               ans1[i][j]=ans.get(i).get(j);
           }
       }
       return ans1;
    }
    public boolean dfs(char grid[][],String word,int ind,int i,int j,int k)
    {
        if(ind>word.length())
        {
            return false;
        }
        
        //visited[i][j]=1;
        
        if(ind==word.length())
        {
            //visited[i][j]=0;
            return true;
        }
        int u1=u[k]+i;
            int v1=v[k]+j;
            if(u1>=0 && u1<grid.length && v1>=0 && v1<grid[0].length  && grid[u1][v1]==word.charAt(ind))
            {
                if(dfs(grid,word,ind+1,u1,v1,k))
                {
                    
                    return true;
                }
            }
        return false;
    }
}