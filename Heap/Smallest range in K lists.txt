Smallest range in K lists

Given a 2d integer array arr[][] of size k*n, where each row is sorted in ascending order. Your task is to find the smallest range [l, r] that includes at least one element from each of the k lists. If more than one such ranges are found, return the first one.

Examples:

Input: n = 5, k = 3, arr[][] = [[4, 7, 9, 12, 15], [0, 8, 10, 14, 20], [6, 12, 16, 30, 50]]
Output: [6, 8]
Explanation: Smallest range is formed by  number 7 from the first list, 8 from second list and 6 from the third list.
Input: n = 5, k = 3, arr[][] = [[1, 3, 5, 7, 9], [0, 2, 4, 6, 8], [2, 3, 5, 7, 11]]
Output: [1, 2]
Explanation: Smallest range is formed by number 1 present in first list and 2 is present in both 2nd and 3rd list.
Input: n = 2, k = 3, arr[][] = [[2, 4], [1, 7], [20, 40]]
Output: [4, 20]
Explanation: Smallest range is formed by number 4 from the first list, 7 from second list and 20 from the third list.

Code:-
class Pair {
    int val;
    int i;
    int j;
    public Pair(int val,int i,int j)
    {
        this.val=val;
        this.i=i;
        this.j=j;
    }
}
class Solution {
    public ArrayList<Integer> findSmallestRange(int[][] arr)
    {
       PriorityQueue<Pair>pq=new PriorityQueue<>((x,y)->x.val-y.val);
       int max=Integer.MIN_VALUE;
       for(int i=0;i<arr.length;i++)
       {
           if(max<arr[i][0])
           {
               max=arr[i][0];
           }
           pq.add(new Pair(arr[i][0],i,0));
       }
       int distMin=Integer.MAX_VALUE;
       int min=-1;
       int ansMax=-1;
       while(!pq.isEmpty())
       {
           Pair front=pq.poll();
           int t1=max-front.val;
           if(distMin>t1)
           {
               distMin=t1;
               min=front.val;
               ansMax=max;
           }
           if(front.j+1<arr[0].length)
           {
               if(max<arr[front.i][front.j+1])
               {
                   max=arr[front.i][front.j+1];
               }
               pq.add(new Pair(arr[front.i][front.j+1],front.i,front.j+1));
           }
           else
           {
               break;
           }
       }
       ArrayList<Integer>ans=new ArrayList<>();
       ans.add(min);
       ans.add(ansMax);
       return ans;
        
    }
}