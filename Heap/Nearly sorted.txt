Nearly sorted

Given an array of n elements, where each element is at most k away from its target position, you need to sort the array optimally.

Example 1:

â€‹Input : 
N = 7, K = 3
arr[ ] = {6, 5, 3, 2, 8, 10, 9}
Output : 2 3 5 6 8 9 10
Explanation:
The sorted array is: 
2 3 5 6 8 9 10

â€‹Example 2:

Input : 
N = 5, K = 2
arr[ ] = {4, 3, 1, 2, 5} 
Output :  1 2 3 4 5 

Code------------------------------------------------

class Solution {
    void nearlySorted(int arr[], int n, int k) 
    {
        PriorityQueue<Integer>pq=new PriorityQueue<>();
        int k1=0;
        for(int i=0;i<n;i++)
        {
            if(pq.size()<=k)
            {
                pq.add(arr[i]);
            }
            else
            {
                arr[k1++]=pq.poll();
                pq.add(arr[i]);
            }
        }
        while(!pq.isEmpty())
        {
            arr[k1++]=pq.poll();
        }
        
    }
}