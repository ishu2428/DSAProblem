Replace O's with X's

Given a matrix mat where every element is either 'O' or 'X'. Replace all 'O' or a group of 'O' with 'X' that are surrounded by 'X'.

A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations just below, just above, just left and just right of it.

Examples:

Input: mat = 
[['X', 'X', 'X', 'X'], 
['X', 'O', 'X', 'X'], 
['X', 'O', 'O', 'X'], 
['X', 'O', 'X', 'X'], 
['X', 'X', 'O', 'O']]
Output: 
[['X', 'X', 'X', 'X'], 
['X', 'X', 'X', 'X'], 
['X', 'X', 'X', 'X'], 
['X', 'X', 'X', 'X'], 
['X', 'X', 'O', 'O']]
Explanation: We only changed those 'O' that are surrounded by 'X'
Input: mat = 
[['X', 'O', 'X', 'X'], 
['X', 'O', 'X', 'X'], 
['X', 'O', 'O', 'X'], 
['X', 'O', 'X', 'X'], 
['X', 'X', 'O', 'O']]
Output: 
[['X', 'O', 'X', 'X'], 
['X', 'O', 'X', 'X'], 
['X', 'O', 'O', 'X'], 
['X', 'O', 'X', 'X'], 
['X', 'X', 'O', 'O']]
Explanation: There's no 'O' that's surround by 'X'.
Input: mat = 
[['X', 'X', 'X'], 
['X', 'O', 'X'], 
['X', 'X', 'X']]
Output: 
[['X', 'X', 'X'], 
['X', 'X', 'X'], 
['X', 'X', 'X']]
Explanation: There's only one 'O' that's surround by 'X'.


Code:-------------------------------------------------------------



// User function Template for Java

class Solution 
{
    static int u[]={-1,0,1,0};
    static int v[]={0,1,0,-1};
    static char[][] fill(char mat[][]) 
    {
        int visited[][]=new int[mat.length][mat[0].length];
        for(int i=0;i<mat.length;i++)
        {
            if(mat[i][0]=='O' &&visited[i][0]==0)
            {
                dfs(mat,visited,i,0);
            }
        }
        for(int j=0;j<mat[0].length;j++)
        {
            if(mat[0][j]=='O' && visited[0][j]==0)
            {
                dfs(mat,visited,0,j);
            }
        }
        
        for(int i=0;i<mat.length;i++)
        {
            if(mat[i][mat[0].length-1]=='O' && visited[i][mat[0].length-1]==0)
            {
                dfs(mat,visited,i,mat[0].length-1);
            }
        }
        for(int j=0;j<mat[0].length;j++)
        {
            if(mat[mat.length-1][j]=='O' && visited[mat.length-1][j]==0)
            {
                dfs(mat,visited,mat.length-1,j);
            }
        }
        for(int i=0;i<mat.length;i++)
        {
            for(int j=0;j<mat[0].length;j++)
            {
                if(mat[i][j]=='O' && visited[i][j]==0)
                {
                    mat[i][j]='X';
                }
            }
        }
        return mat;
    }
    
    public static void dfs(char mat[][],int visited[][],int i,int j)
    {
        visited[i][j]=1;
        for(int i1=0;i1<4;i1++)
        {
            int u1=u[i1]+i;
            int v1=v[i1]+j;
            if(u1>=0 && u1<mat.length && v1>=0 && v1<mat[0].length && mat[u1][v1]=='O' && visited[u1][v1]==0)
            {
                dfs(mat,visited,u1,v1);
            }
        }
    }
    
    
}