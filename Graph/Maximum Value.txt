Maximum Value

Given an undirected graph with V vertices and E edges. Every node has been assigned a given value. The task is to find the connected chain with the maximum sum of values among all the connected components in the graph.

Note: All the node values are in 1-based indexing.

Example 1:

Input: V = 7, E = 4 
Values = {10, 25, 5, 15, 5, 20, 0}
Edges={{2,1},{3,4},
       {4,5},{6,7}}


Output : Max Sum value = 35 
Explanation:
Component {1, 2} – Value {10, 25}: 
sumValue = 10 + 25 = 35 
Component {3, 4, 5} – Value {5, 15, 5}: 
sumValue = 5 + 15 + 5 = 25 
Component {6, 7} – Value {20, 0}: 
sumValue = 20 + 0 = 20 
Max Sum value chain is {1, 2} 
with values {10, 25}, hence 35 is answer. 
Example 2:

Input: V = 10, E = 6 
Values = {5, 10, 15, 20, 25, 30, 35, 40, 45, 50}
Edges={{2,3},{3,4},{4,5},
      {6,7},{7,8},{9,10}}

Output : Max Sum value = 105

Code:------------------------------------------------------


// User function Template for Java

class Solution {
    // Function to find the number of islands.
    static int sum;
    public int maxNodeValue(int[] values, int[][] edges, int v1, int e)
    {
       
        
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        for(int i=0;i<v1;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++)
        {
            int u=edges[i][0]-1;
            int v=edges[i][1]-1;
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int visited[]=new int[v1];
        int max=Integer.MIN_VALUE;
        for(int i=0;i<v1;i++)
        {
            if(visited[i]==0)
            {
                sum=0;
                dfs(adj,visited,i,values);
                if(max<sum)
                {
                    max=sum;
                }
            }
        }
        return max;
    }
    public void dfs(ArrayList<ArrayList<Integer>>adj,int visited[],int src,int values[])
    {
        visited[src]=1;
        sum+=values[src];
        for(int i=0;i<adj.get(src).size();i++)
        {
            if(visited[adj.get(src).get(i)]==0)
            {
                dfs(adj,visited,adj.get(src).get(i),values);
            }
        }
    }
    
}