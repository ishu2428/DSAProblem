Bipartite Graph

Given a Graph with V vertices (Numbered from 0 to V-1) and E edges. Check whether the graph is bipartite or not.

A bipartite graph can be colored with two colors such that no two adjacent vertices share the same color. This means we can divide the graphâ€™s vertices into two distinct sets where:

All edges connect vertices from one set to vertices in the other set.
No edges exist between vertices within the same set.
Examples:

Input: V = 3, edges[][] = [[0, 1], [1,2]]
Bipartite-Graph
Output: true
Explanation: The given graph can be colored in two colors so, it is a bipartite graph.
Input: V = 4, edges[][] = [[0, 3], [1, 2], [3, 2], [0, 2]]




Output: false 
Explanation: The given graph cannot be colored in two colors such that color of adjacent vertices differs. 

code:----------------------------------


class Solution
{
    public boolean isBipartite(int V, int[][] edges) 
    {
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        for(int i=0;i<V;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            adj.get(u).add(v);
            adj.get(v).add(u);
        }
        int visited[]=new int[V];
        for(int i=0;i<V;i++)
        {
            if(visited[i]==0)
            {
                if(dfs(adj,visited,i,1)==false)
                {
                    return false;
                }
            }
        }
        return true;
    }
    public boolean dfs(ArrayList<ArrayList<Integer>>adj,int visited[],int src,int col)
    {
        visited[src]=col;
        for(int i=0;i<adj.get(src).size();i++)
        {
            if(visited[adj.get(src).get(i)]==0)
            {
                int newCol=0;
                if(col==1)
                {
                    newCol=2;
                }
                else
                {
                    newCol=1;
                }
                if(dfs(adj,visited,adj.get(src).get(i),newCol)==false)
                {
                    return false;
                }
            }
            else if(visited[adj.get(src).get(i)]==col)
            {
                return false;
            }
        }
        return true;
    }
}


