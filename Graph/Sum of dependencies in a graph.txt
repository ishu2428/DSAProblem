Sum of dependencies in a graph

Given a directed graph with V nodes and E edges, the graph's edges are represented as a 2D array, edges[][]. Each row in the array represents a directed edge (u, v), meaning there is a directed edge from node u to node v. If there is a directed edge from u to v, it means that u depends on v. The Number of Dependencies (NoD) for a node x is the total count of nodes that x depends upon.

Your task is to calculate the sum of the Number of Dependencies (NoD) for all nodes in the graph.

Examples:

Input: V = 4, E = 4, edges[][] = [[0,2],[0,3],[1,3],[2,3]]

Output: 4
Explanation: For the graph in diagram, A depends on C and D i.e. A's NoD is 2, B depends on D i.e. B's NoD is 1, C depends on D i.e. D's NoD is 1 and D depends on none. Hence answer is 2 + 1 + 1 + 0 = 4.
Input: V = 4, E = 3, edges[][] = [[0,3],[0,2],[0,1]]
Output: 3
Explanation: The sum of dependencies: 3 + 0 + 0 + 0 = 3.

Code-------------

//Back-end complete function Template for Java

class Solution {
    // function to calculate the sum of dependencies in the graph
    int sumOfDependencies(int V, int[][] edges) {
       int indegree[]=new int[V];
       for(int i=0;i<edges.length;i++)
       {
           int u=edges[i][0];
           int v=edges[i][1];
           indegree[v]++;
       }
       int ans=0;
       for(int i=0;i<V;i++)
       {
           ans=ans+indegree[i];
       }
       return ans;
        
    }
};