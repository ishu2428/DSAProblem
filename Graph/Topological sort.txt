Topological sort

Given a Directed Acyclic Graph (DAG) of V (0 to V-1) vertices and E edges represented as a 2D list of edges[][], where each entry edges[i] = [u, v] denotes a directed edge u -> v. Return the topological sort for the given graph.

Topological sorting for Directed Acyclic Graph (DAG) is a linear ordering of vertices such that for every directed edge u -> v, vertex u comes before v in the ordering.
Note: As there are multiple Topological orders possible, you may return any of them. If your returned Topological sort is correct then the output will be true else false.

Examples:

Input: V = 4, E = 3, edges[][] = [[3, 0], [1, 0], [2, 0]]

Output: true
Explanation: The output true denotes that the order is valid. Few valid Topological orders for the given graph are:
[3, 2, 1, 0]
[1, 2, 3, 0]
[2, 3, 1, 0]
Input: V = 6, E = 6, edges[][] = [[1, 3], [2, 3], [4, 1], [4, 0], [5, 0], [5,2]]

Output: true
Explanation: The output true denotes that the order is valid. Few valid Topological orders for the graph are:
[4, 5, 0, 1, 2, 3]
[5, 2, 4, 0, 1, 3]


Code:--------------------

class Solution {
    public static ArrayList<Integer> topoSort(int V, int[][] edges) 
    {
        ArrayList<ArrayList<Integer>>adj=new ArrayList<>();
        for(int i=0;i<V;i++)
        {
            adj.add(new ArrayList<>());
        }
        for(int i=0;i<edges.length;i++)
        {
            int u=edges[i][0];
            int v=edges[i][1];
            adj.get(u).add(v);
        }
        int indeg[]=new int[V];
        for(int i=0;i<adj.size();i++)
        {
            for(int j=0;j<adj.get(i).size();j++)
            {
                indeg[adj.get(i).get(j)]++;
            }
        }
        Queue<Integer>q1=new LinkedList<>();
        for(int i=0;i<V;i++){
            if(indeg[i]==0)
            {
                q1.add(i);
            }
        }
        ArrayList<Integer>ans=new ArrayList<>();
        while(!q1.isEmpty())
        {
            int front=q1.poll();
            ans.add(front);
            for(int i=0;i<adj.get(front).size();i++)
            {
                indeg[adj.get(front).get(i)]--;
                if(indeg[adj.get(front).get(i)]==0)
                {
                    q1.add(adj.get(front).get(i));
                }
            }
        }
        return ans;
    }
}