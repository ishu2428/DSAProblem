Find the number of islands

Given a grid of size n*m (n is the number of rows and m is the number of columns in the grid) consisting of 'W's (Water) and 'L's (Land). Find the number of islands.

Note: An island is either surrounded by water or the boundary of a grid and is formed by connecting adjacent lands horizontally or vertically or diagonally i.e., in all 8 directions.

Examples:

Input: grid[][] = [['L', 'L', 'W', 'W', 'W'], ['W', 'L', 'W', 'W', 'L'], ['L', 'W', 'W', 'L', 'L'], ['W', 'W', 'W', 'W', 'W'], ['L', 'W', 'L', 'L', 'W']]
Output: 4
Explanation:
The image below shows all the 4 islands in the grid.
 
Input: grid[][] = [['W', 'L', 'L', 'L', 'W', 'W', 'W'], ['W', 'W', 'L', 'L', 'W', 'L', 'W']]
Output: 2
Expanation:
The image below shows 2 islands in the grid.
 
Constraints:

Code:----------------------------------------

class Solution {
    
    static int u[]={-1,0,1,0,-1,-1,1,1};
    static int v[]={0,1,0,-1,-1,1,-1,1};
    public int countIslands(char[][] grid) {
        int visited[][]=new int [grid.length][grid[0].length];
        int ans=0;
        for(int i=0;i<grid.length;i++)
        {
            for(int j=0;j<grid[0].length;j++)
            {
                if(grid[i][j]=='L' && visited[i][j]==0)
                {
                    dfs(grid,visited,i,j);
                    ans++;
                }
            }
        }
        return ans;
    }
    public void dfs(char grid[][],int visited[][],int i,int j)
    {
        visited[i][j]=1;
        for(int i1=0;i1<8;i1++)
        {
            int u1=u[i1]+i;
            int v1=v[i1]+j;
            if(u1>=0 && u1<grid.length && v1>=0 && v1<grid[0].length && grid[u1][v1]=='L' && visited[u1][v1]==0)
            {
                dfs(grid,visited,u1,v1);
            }
        }
    }
}