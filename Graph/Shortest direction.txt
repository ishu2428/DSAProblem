Shortest direction

A person wants to go from origin to a particular location, he can move in only 4 directions(i.e East, West, North, South) but his friend gave him a long route, help a person to find minimum Moves so that he can reach to the destination.

Note: You need to print the lexicographically sorted string. Assume the string will have only ‘E’ ‘N’ ‘S’ ‘W’ characters.

Example 1:

Input:
S = "SSSNEEEW"
Output: EESS
Explanation: Following the path SSSNEEEW
and EESS gets you at the same final point.
There's no shorter path possible.
â€‹Example 2:

Input: 
S = "NESNWES"
Output: E
Explanation: Following the path NESNWES
and E gets you at the same final point.
There's no shorter path possible.

Your Task:
You don't need to read input or print anything. Your task is to complete the function shortestPath() which takes the string S as input and returns the resultant string denoting the shortest path in lexicographic order.


Expected Time Complexity: O(|S|).
Expected Auxiliary Space: O(|S|) for output.



Code----------

// User function Template for Java

class Solution {
    String shortestPath(String str) 
    {
        int x=0;
        int y=0;
        for(int i=0;i<str.length();i++)
        {
            if(str.charAt(i)=='E')
            {
                x++;
            }
            else if(str.charAt(i)=='W')
            {
                x--;
            }
            else if(str.charAt(i)=='N')
            {
                y++;
            }
            else
            {
                y--;
            }
        }
        StringBuffer str1=new StringBuffer();
        if(x>0)
        {
            for(int i=1;i<=x;i++)
            {
                str1.append('E');
            }
        }
        
        if(y>0)
        {
            for(int i=1;i<=y;i++)
            {
                str1.append('N');
            }
        }
         if(y<0)
        {
            for(int i=y;i<0;i++)
            {
                str1.append('S');
            }
        }
        if(x<0)
        {
            for(int i=x;i<0;i++)
            {
                str1.append('W');
            }
        }
       
        return str1.toString();
    }
}