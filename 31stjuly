BFS of graph
Given a directed graph. The task is to do Breadth First Traversal of 
this graph starting from 0.
Note: One can move from node u to node v only if there's an edge from u to v. Find the BFS traversal of the graph starting from the 0th vertex, from left to right according to the input graph. Also, you should only take nodes directly or indirectly connected from Node 0 in consideration.

Input:

Output: 0 1 2 3 4
Explanation: 
0 is connected to 1 , 2 , 3.
2 is connected to 4.
so starting from 0, it will go to 1 then 2
then 3. After this 2 to 4, thus bfs will be
0 1 2 3 4.

Input:

Output: 0 1 2
Explanation:
0 is connected to 1 , 2.
so starting from 0, it will go to 1 then 2,
thus bfs will be 0 1 2. 

code
class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        ArrayList<Integer>ans=new ArrayList<>();
        int visited[]=new int[V];
         bfs(adj,visited,ans,0);
        /*for(int i=0;i<V;i++){
            if(visited[i]==0){
               
            }
        }*/
        return ans;
    }
    public static void bfs(ArrayList<ArrayList<Integer>>adj,int visited[],ArrayList<Integer>ans,int src){
        Queue<Integer>q1=new LinkedList<>();
        q1.add(src);
        visited[src]=1;
        
        while(!q1.isEmpty()){
            int front=q1.poll();
            ans.add(front);
            for(int i=0;i<adj.get(front).size();i++){
                if(visited[adj.get(front).get(i)]==0){
                    q1.add(adj.get(front).get(i));
                    visited[adj.get(front).get(i)]=1;
                }
            }
        }
    }
}