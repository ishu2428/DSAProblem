Perfect Sum Problem
Given an array arr[] of non-negative integers and an integer sum, the task is to count all subsets of the given array with a sum equal to a given sum.

Note: Answer can be very large, so, output answer modulo 109+7

Example 1:

Input: N = 6, arr[] = {2, 3, 5, 6, 8, 10}
       sum = 10
Output: 3
Explanation: {2, 3, 5}, {2, 8}, {10} are 
possible subsets.
Example 2:
Input: N = 5, arr[] = {1, 2, 3, 4, 5}
       sum = 10
Output: 3
Explanation: {1, 2, 3, 4}, {1, 4, 5}, 
{2, 3, 5} are possible subsets.
Your Task:  
You don't need to read input or print anything. Complete the function perfectSum() which takes N, array arr[] and sum as input parameters and returns an integer value

Expected Time Complexity: O(N*sum)
Expected Auxiliary Space: O(N*sum)

Constraints:
1 ≤ N*sum ≤ 106
0<=arr[I]<=106

//code


class Solution{

	public int perfectSum(int arr[],int n, int sum) 
	{ 
	    Arrays.sort(arr);
	    int dp[][]=new int[arr.length+1][sum+1];
	    for(int i=0;i<dp.length;i++){
	        for(int j=0;j<dp[0].length;j++){
	            dp[i][j]=-1;
	        }
	    }
	    return helper(arr,0,sum,dp);
	}
	public int helper(int arr[],int i,int j,int dp[][]){
	    if(j==0){
	        return 1;
	    }
	    if(j<0){
	        return 0;
	    }
	    if(i==arr.length){
	        return 0;
	    }
	    
	    if(dp[i][j]!=-1){
	        return dp[i][j];
	    }
	    int ans1=helper(arr,i+1,j-arr[i],dp);
	    int ans2=helper(arr,i+1,j,dp);
	    dp[i][j]=(ans1+ans2)%1000000007;
	    return dp[i][j];
	}
}