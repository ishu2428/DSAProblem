Partition Equal Subset Sum
Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

Example 1:

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explanation: 
The two parts are {1, 5, 5} and {11}.
Example 2:

Input: N = 3
arr = {1, 3, 5}
Output: NO
Explanation: This array can never be 
partitioned into two such parts.
Your Task:
You do not need to read input or print anything. Your task is to complete the function equalPartition() which takes the value N and the array as input parameters and returns 1 if the partition is possible. Otherwise, returns 0.

Expected Time Complexity: O(N*sum of elements)
Expected Auxiliary Space: O(N*sum of elements)

Constraints:
1 ≤ N ≤ 100
1 ≤ arr[i] ≤ 1000
N*sum of elements ≤ 5*106

//code


// User function Template for Java

class Solution{
    static int equalPartition(int N, int arr[])
    {
        int sum=0;
        for(int i=0;i<arr.length;i++){
            sum=sum+arr[i];
        }
        if(sum%2==1){
            return 0;
        }
        sum=sum/2;
        int dp[][]=new int [arr.length+1][sum+1];
        for(int i=0;i<dp.length;i++){
            for(int j=0;j<dp[0].length;j++){
                dp[i][j]=-1;
            }
        }
        if(helper(arr,dp,0,sum)==1){
            return 1;
        }
        else{
            return 0;
        }
    }
    public static int helper(int arr[],int dp[][],int i,int j){
        if(j==0){
            return 1;
        }
        if(j<0){
            return 0;
        }
        if(i>=arr.length){
            return 0;
        }
        if(dp[i][j]!=-1){
            return dp[i][j];
        }
        int ans1=helper(arr,dp,i+1,j-arr[i]);
        int ans2=helper(arr,dp,i+1,j);
        if(ans1==1 || ans2==1){
            dp[i][j]=1;
        }
        else{
            dp[i][j]=0;
        }
        return dp[i][j];
    }
    
}