//Replace O's with X's
/*Given a matrix mat of size N x M where every element is either 'O' or 'X'. Replace all 'O' with 'X' that are surrounded by 'X'.

A 'O' (or a set of 'O') is considered to be surrounded by 'X' if there are 'X' at locations just below, just above, just left and just right of it.

Example 1:

Input: 
n = 5, m = 4
mat = {{'X', 'X', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'O', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Output: 
ans = {{'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Explanation: 
Following the rule the above matrix is the resultant matrix. 
Example 2:

 

Input: 
n = 5, m = 4
mat = {{'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'O', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Output: 
ans = {{'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'O', 'O', 'X'}, 
       {'X', 'O', 'X', 'X'}, 
       {'X', 'X', 'O', 'O'}}
Explanation: 
Following the rule the above matrix is the resultant matrix.
Your Task:
You do not need to read input or print anything. Your task is to complete the function fill() which takes N, M and mat as input parameters ad returns a 2D array representing the resultant matrix.

Expected Time Complexity: O(n*m)
Expected Auxiliary Space: O(n*m)

Constraints:
1 ≤ n, m ≤ 500*/
//code


//User function Template for Java

class Solution {
              static char[][] fill(int n, int m, char arr[][]) {
                  int visited[][] = new int[arr.length][arr[0].length];
                            for (int i = 0; i < arr[0].length; i++) {
                                          if (arr[0][i] == 'O' && visited[0][i] == 0) {
                                                        dfs(arr, visited, 0, i);
                                          }
                            }
                            for (int i = 0; i < arr.length; i++) {
                                          if (arr[i][arr[0].length - 1] == 'O' && visited[i][arr[0].length - 1] == 0) {
                                                        dfs(arr, visited, i, arr[0].length - 1);
                                          }
                            }
                            for (int i = arr[0].length - 1; i >= 0; i--) {
                                          if (arr[arr.length - 1][i] == 'O' && visited[arr.length - 1][i] == 0) {
                                                        dfs(arr, visited, arr.length - 1, i);
                                          }
                            }
                            for (int i = 0; i < arr.length; i++) {
                                          if (arr[i][0] == 'O' && visited[i][0] == 0) {
                                                        dfs(arr, visited, i, 0);
                                          }
                            }

                            for (int i = 0; i < arr.length; i++) {
                                          for (int j = 0; j < arr[0].length; j++) {
                                                        if (visited[i][j] == 1) {
                                                                      arr[i][j] = 'O';
                                                        }
                                                        else {
                                                                      arr[i][j] = 'X';
                                                        }
                                          }
                            }
                            return arr;
              }
              public static void dfs(char arr[][], int visited[][], int i, int j) {
                            visited[i][j] = 1;
                            if (i - 1 >= 0 && arr[i - 1][j] == 'O' && visited[i - 1][j] == 0) {
                                          dfs(arr, visited, i - 1, j);
                            }
                            if (j + 1 < arr[0].length && arr[i][j + 1] == 'O' && visited[i][j + 1] == 0) {
                                          dfs(arr, visited, i, j + 1);
                            }
                            if (i + 1 < arr.length && arr[i + 1][j] == 'O' && visited[i + 1][j] == 0) {
                                          dfs(arr, visited, i + 1, j);
                            }
                            if (j - 1 >= 0 && arr[i][j - 1] == 'O' && visited[i][j - 1] == 0) {
                                          dfs(arr, visited, i, j - 1);
                            }
              }
}


